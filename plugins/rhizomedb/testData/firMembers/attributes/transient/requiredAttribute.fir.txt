FILE: requiredAttribute.kt
    public abstract interface MarkerInterface : R|kotlin/Any| {
    }
    @R|com/jetbrains/rhizomedb/GeneratedEntityType|() public final data class MyEntity : R|com/jetbrains/rhizomedb/Entity| {
        public constructor(eid: R|com/jetbrains/rhizomedb/EID|): R|MyEntity| {
            super<R|kotlin/Any|>()
        }

        public open override val eid: R|com/jetbrains/rhizomedb/EID| = R|<local>/eid|
            public get(): R|com/jetbrains/rhizomedb/EID|

        @R|com/jetbrains/rhizomedb/TransientAttribute|() public final val marker: R|MarkerInterface|by this@R|/MyEntity.Companion|.R|/MyEntity.Companion.markerAttr|
            public get(): R|MarkerInterface| {
                ^ this@R|/MyEntity|.D|/MyEntity.marker|.R|SubstitutionOverride<com/jetbrains/rhizomedb/Attributes.Required.getValue: R|MarkerInterface|>|(this@R|/MyEntity|, ::R|/MyEntity.marker|)
            }

        public final operator fun component1(): R|com/jetbrains/rhizomedb/EID|

        public final fun copy(eid: R|com/jetbrains/rhizomedb/EID| = this@R|/MyEntity|.R|/MyEntity.eid|): R|MyEntity|

        public final companion object Companion : R|com/jetbrains/rhizomedb/EntityType<MyEntity>| {
            public final val markerAttr: R|com/jetbrains/rhizomedb/Attributes.Required<MarkerInterface, MyEntity>|
                public get(): R|com/jetbrains/rhizomedb/Attributes.Required<MarkerInterface, MyEntity>|

        }

    }
    public final fun foo(marker: R|MarkerInterface|): R|MarkerInterface| {
        lval entity: R|MyEntity| = R|com/jetbrains/rhizomedb/entity|<R|MyEntity|, R|MarkerInterface|>(Q|MyEntity|.R|/MyEntity.Companion.markerAttr|, R|<local>/marker|) ?: R|kotlin/error|(String(No Entity))
        lval result: R|MarkerInterface| = R|<local>/entity|.R|com/jetbrains/rhizomedb/get|<R|MyEntity|, R|MarkerInterface|>(Q|MyEntity|.R|/MyEntity.Companion.markerAttr|)
        ^foo R|<local>/result|
    }
