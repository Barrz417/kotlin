@GeneratedEntityType(mixins = [])
data class MyEntity : Entity {
  override val eid: Int
    field = eid
    override get

  @ValueAttribute(flags = [])
  val string: String
    field = ""
    get

  companion object Companion : EntityType<MyEntity> {
    val stringAttr: Required<String, MyEntity>
      field = Companion.requiredTransient</* null */>(name = "stringAttr")
      get

    constructor() /* primary */ {
      super/*EntityType*/<MyEntity>(ident = "MyEntity", module = entityModule(entityClass = KClass::class), reify = MyEntity::<init>, mixins = [])
    }

  }

  constructor(eid: Int) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  operator fun component1(): Int {
    return <this>.#eid
  }

  fun copy(eid: Int = <this>.#eid): MyEntity {
    return MyEntity(eid = eid)
  }

  override operator fun equals(other: Any?): Boolean {
    when {
      EQEQEQ(arg0 = <this>, arg1 = other) -> return true
    }
    when {
      other !is MyEntity -> return false
    }
    val tmp_0: MyEntity = other as MyEntity
    when {
      EQEQ(arg0 = <this>.#eid, arg1 = tmp_0.#eid).not() -> return false
    }
    return true
  }

  override fun hashCode(): Int {
    return <this>.#eid.hashCode()
  }

  override fun toString(): String {
    return "MyEntity(" + "eid=" + <this>.#eid + ")"
  }

}

fun foo(): String {
  val entity: MyEntity = { // BLOCK
    val tmp_1: MyEntity? = entity<MyEntity, String>(entityAttribute = Companion.<get-stringAttr>(), value = "Hello")
    when {
      EQEQ(arg0 = tmp_1, arg1 = null) -> error(message = "No Entity")
      else -> tmp_1
    }
  }
  val result: String = entity.get<MyEntity, String>(attribute = Companion.<get-stringAttr>())
  return result
}
