@GeneratedEntityType(mixins = [])
data class MyEntity : Entity {
  override val eid: Int
    field = eid
    override get

  companion object Companion : EntityType<MyEntity> {
    constructor() /* primary */ {
      super/*EntityType*/<MyEntity>(ident = "MyEntity", module = entityModule(entityClass = KClass::class), reify = MyEntity::<init>, mixins = [])
    }

  }

  constructor(eid: Int) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  operator fun component1(): Int {
    return <this>.#eid
  }

  fun copy(eid: Int = <this>.#eid): MyEntity {
    return MyEntity(eid = eid)
  }

  override operator fun equals(other: Any?): Boolean {
    when {
      EQEQEQ(arg0 = <this>, arg1 = other) -> return true
    }
    when {
      other !is MyEntity -> return false
    }
    val tmp_0: MyEntity = other as MyEntity
    when {
      EQEQ(arg0 = <this>.#eid, arg1 = tmp_0.#eid).not() -> return false
    }
    return true
  }

  override fun hashCode(): Int {
    return <this>.#eid.hashCode()
  }

  override fun toString(): String {
    return "MyEntity(" + "eid=" + <this>.#eid + ")"
  }

}
